name: Build iStore OS TEST

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
   - cron: 0 16 * * *

env:
  REPO_URL: https://github.com/istoreos/istoreos
  # REPO_BRANCH: main
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    #runs-on: self-hosted
    strategy:
      matrix:
        REPO_BRANCH:
          # - main
          - istoreos-22.03
          # - istoreos-23.05
        ARCHITECTURE:
          #- rk33xx
          #- rk35xx
          - x86
        os:
          - ubuntu-20.04
#        include:
#          - REPO_BRANCH: istoreos-22.03
#            ARCHITECTURE: x86-alpha
#            os: ubuntu-20.04

      fail-fast: false

    steps:
    - name: 准备完成
      uses: actions/checkout@main

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 更新并安装依赖 -------------------------------"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends/${{ matrix.os }})
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        echo "------------------------------- 清理Docker镜像和软件 -------------------------------"
        docker rmi `docker images -q`
        docker image prune -a -f
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 清理完成再次检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th

    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b ${{ matrix.REPO_BRANCH }} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

